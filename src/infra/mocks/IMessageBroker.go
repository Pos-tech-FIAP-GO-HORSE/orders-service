// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IMessageBroker is an autogenerated mock type for the IMessageBroker type
type IMessageBroker struct {
	mock.Mock
}

// Publish provides a mock function with given fields: ctx, topicArn, message
func (_m *IMessageBroker) Publish(ctx context.Context, topicArn string, message string) error {
	ret := _m.Called(ctx, topicArn, message)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, topicArn, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Subscribe provides a mock function with given fields: ctx, topicArn, protocol
func (_m *IMessageBroker) Subscribe(ctx context.Context, topicArn string, protocol string) (string, error) {
	ret := _m.Called(ctx, topicArn, protocol)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, topicArn, protocol)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, topicArn, protocol)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, topicArn, protocol)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIMessageBroker creates a new instance of IMessageBroker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIMessageBroker(t interface {
	mock.TestingT
	Cleanup(func())
}) *IMessageBroker {
	mock := &IMessageBroker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
